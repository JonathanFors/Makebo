<script>var countdown = function(t) {
  "use strict";
  class e {
    constructor() {
      this.data = {}
    }
    set(t, e) {
      this.data[t] = e
    }
    get(t) {
      return this.data[t]
    }
  }
  const n = class {
    constructor(t) {
      this.options = t
    }
    log(t, e) {
      const n = [`%c[${this.options.title}] ${t}. Link to documentation ${this.options.documentationLink}`, "\n      display: inline-block;\n      padding: 4px 6px;\n      border-radius: 4px;\n      line-height: 1.5em;\n      color: #282735;\n      background: linear-gradient(45deg,\n        rgba(185, 205, 255, 0.4) 0%,\n        rgba(201, 182, 255, 0.4) 33%,\n        rgba(239, 184, 255, 0.4) 66%,\n        rgba(255, 210, 177, 0.4) 100%);\n        "];
      e ? (console.group(...n), Array.isArray(e) ? console.log(...e) : console.log(e), console.groupEnd()) : console.log(...n)
    }
    validate(t, e, n) {
      if (!t.validate) return !0;
      if ("function" == typeof t.validate) {
        if (!t.validate(n)) return this.log(`Invalid value "${n}" for attribute "${e}"`), !1
      } else if (!t.validate.includes(n)) return this.log(`Invalid value "${n}" for attribute "${e}"`, ["%cPossible values:%c\n" + t.validate.map((t => `&bull; ${t}`)).join("\n"), "font-weight: 700;", "font-weight: initial;"]), !1;
      return !0
    }
    parse(t) {
      const n = new e;
      for (const e in this.options.attributes) {
        const o = this.options.attributes[e],
          s = t.getAttribute(e);
        if (!s) {
          n.set(e, o.defaultValue);
          continue
        }
        if (!this.validate(o, e, s)) continue;
        let i = s;
        o.parse && (i = o.parse(s) ?? o.defaultValue), n.set(e, i)
      }
      this.options.apply.call(this, t, n)
    }
    getElements() {
      return document.querySelectorAll(`[${this.options.name}]`)
    }
    init() {
      this.getElements().forEach((t => this.parse(t)))
    }
  };
  const o = t => {
    if (!t) return !1;
    const e = new Date(t);
    return !isNaN(e.valueOf())
  };
  var s, i = ((s = i || {}).Weeks = "weeks", s.Days = "days", s.Hours = "hours", s.Minutes = "minutes", s.Seconds = "seconds", s);
  const a = 1e3,
    r = 60 * a,
    l = 60 * r,
    u = 24 * l,
    c = 7 * u,
    d = {
      Countdown: class {
        constructor(t, e) {
          if (this.options = e, !t) throw new Error("Please provide the target date");
          if (!o(t)) throw new Error("Invalid date format");
          this.targetDate = new Date(t).getTime(), this.values = [{
            unit: i.Weeks,
            value: 0,
            shift: 0,
            skip: !e.weeks,
            calc: t => Math.floor(t / c)
          }, {
            unit: i.Days,
            value: 0,
            shift: 7,
            skip: !e.days,
            calc: t => Math.floor(t % c / u)
          }, {
            unit: i.Hours,
            value: 0,
            shift: 24,
            skip: !e.hours,
            calc: t => Math.floor(t % u / l)
          }, {
            unit: i.Minutes,
            value: 0,
            shift: 60,
            skip: !e.minutes,
            calc: t => Math.floor(t % l / r)
          }, {
            unit: i.Seconds,
            value: 0,
            shift: 60,
            skip: !e.seconds,
            calc: t => Math.floor(t % r / a)
          }]
        }
        get intervalTimeout() {
          switch (!0) {
            case this.options.seconds:
            default:
              return a;
            case this.options.minutes:
              return r;
            case this.options.hours:
              return l;
            case this.options.days:
              return u;
            case this.options.weeks:
              return c
          }
        }
        updateValues() {
          if (!this.targetDate) return;
          const t = (new Date).getTime(),
            e = this.targetDate - t,
            n = {};
          this.values.forEach(((t, o) => {
            if (e > 0) {
              t.value = t.calc(e);
              const n = this.values[o - 1];
              null != n && n.skip && (t.value += n.value * t.shift)
            }
            t.skip || (n[t.unit] = t.value)
          })), this.options.onUpdate(n), e <= this.intervalTimeout && (this.stop(), this.options.onComplete && this.options.onComplete())
        }
        start() {
          this.intervalId || (this.updateValues(), this.intervalId = setInterval((() => {
            this.updateValues()
          }), this.intervalTimeout))
        }
        stop() {
          clearInterval(this.intervalId), this.intervalId = void 0
        }
      },
      validation: {
        isValidDate: o
      }
    };
  var h = (t => (t.Root = "fb-countdown", t.Target = "fb-countdown-target", t.Type = "fb-countdown-type", t.Finish = "fb-countdown-finish", t))(h || {}),
    p = (t => (t.Weeks = "weeks", t.Days = "days", t.Hours = "hours", t.Minutes = "minutes", t.Seconds = "seconds", t))(p || {});
  const v = new n({
      name: h.Root,
      attributes: {
        [h.Target]: {
          defaultValue: "",
          validate: d.validation.isValidDate
        }
      },
      apply(t, e) {
        const n = e.get(h.Target);
        if (!n) return;
        const o = t.querySelector(`[${h.Type}=${p.Weeks}]`),
          s = t.querySelector(`[${h.Type}=${p.Days}]`),
          i = t.querySelector(`[${h.Type}=${p.Hours}]`),
          a = t.querySelector(`[${h.Type}=${p.Minutes}]`),
          r = t.querySelector(`[${h.Type}=${p.Seconds}]`);
        if (!(o || s || i || a || r)) return this.log("Required attribute is missing");
        const l = t.querySelector(`[${h.Finish}]`);
        l && (l.style.display = "none"), new d.Countdown(n, {
          weeks: !!o,
          days: !!s,
          hours: !!i,
          minutes: !!a,
          seconds: !!r,
          onUpdate(t) {
            var e, n, l, u, c;
            o && (o.textContent = (null == (e = t.weeks) ? void 0 : e.toString()) ?? "0"), s && (s.textContent = (null == (n = t.days) ? void 0 : n.toString()) ?? "0"), i && (i.textContent = (null == (l = t.hours) ? void 0 : l.toString()) ?? "0"), a && (a.textContent = (null == (u = t.minutes) ? void 0 : u.toString()) ?? "0"), r && (r.textContent = (null == (c = t.seconds) ? void 0 : c.toString()) ?? "0")
          },
          onComplete() {
            l && (l.style.display = "block")
          }
        }).start()
      },
      title: "Countdown Booster",
      documentationLink: "https://www.flowbase.co/booster/countdown"
    }),
    f = () => v.init();
  return "complete" === document.readyState ? f() : window.addEventListener("load", f), t.CountdownAttrNames = h, t.CountdownType = p, Object.defineProperty(t, Symbol.toStringTag, {
    value: "Module"
  }), t
}({});
</script>
